[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Canseza Avağ Erdurak",
    "section": "",
    "text": "This progress journal covers Canseza Avağ Erdurak’s work during their term at BDA 503 Fall 2022.\nEach section is an assignment or an individual work."
  },
  {
    "objectID": "assignment1.html#tidyverse",
    "href": "assignment1.html#tidyverse",
    "title": "1  Assignment 1",
    "section": "4.1 Tidyverse",
    "text": "4.1 Tidyverse\nWhen I started to watch conference talk that I mentioned above, I realized I could do anything related to data wrangling I did so far in Pegasus by using R. So, I decided to elaborate on this article. Tidyverse has 8 core packages named ggplot2, dplyr, tidyr, readr, purrr, tibble, stringr and forcats.\n\nData Visualization and Exploration\n\n\nggplot2 is used to create data visualizations like bar charts, pie charts, histograms, scatterplots, error charts, etc.\n\n\nData Wrangling and Transformation\n\n\nDplyr is known for data manipulation. It has five important functions namely mutate(), select(), filter(), summarise() and arrange(). These functions are used with group_by().\nTidyr helps create clean data.\nStringr has many functions for data cleaning and data preparation. All functions in this library starts with “str” and take a string vector as a first argument.\nForcats handles issues like changes the orders of values in vectors, reordering the vectors, etc.\n\n\nData Import and Management\n\n\nReadr helps read rectangular data such as that with file formats tsv, csv, delim, fwf, etc. in a simple and speedy way.\nTibble is a form of a data.frame which includes the useful parts of it and discards the parts that are not so important.\n\n\nFunctional Programming\n\n\nPurrr turns messed-up codes into simpler ones.\n\nArticle : https://www.geeksforgeeks.org/what-are-the-tidyverse-packages-in-r-language/"
  },
  {
    "objectID": "assignment1.html#uncover-the-r-applications",
    "href": "assignment1.html#uncover-the-r-applications",
    "title": "1  Assignment 1",
    "section": "4.2 Uncover the R Applications",
    "text": "4.2 Uncover the R Applications\nI watched many conference talks so that I could chose one for this assignment. These talks make me wonder why R Programming Language is used by top companies from various industries like banking, e-commerce, finance, etc.\nApplications of R Programming :\n\nFinance : R helps financial institutions perform downside risk measurement, adjust risk performance and utilize visualizations like candlestick charts, density plots, drawdown plots, etc. Time-series statistical processes of R are used to model the movement of financial industries’ stock-market and predict the prices of shares. R provides financial data mining capabilities through its packages like quantmod, pdfetch, TFX, pwt, etc. Rshiny helps extract data from online assets.\nBanking : R is most widely used for credit risk modeling and other forms of risk analytics. Hadoop is an ally of R in the fields like analysis of customer quality, customer segmentation, and retention.\nHealthcare : R helps perform pre-clinical trials and analyze the drug-safety data. R is also used for statistical modeling in the field of epidemiology, where data scientists analyze and predict the spread of diseases.\nSocial Media : Some of the important statistical tools like sentiment analysis and other forms of social media data mining are used with R. Social media is used for potential customer segmentation and targeting them as new customers.\nE-commerce : E-commerce companies use R is for analyzing cross-selling products to their customers. Various statistical procedures like linear modeling are necessary to analyze the purchases made by the customers as well as in predicting product sales. Furthermore, companies use R for carrying out A/B testing analysis across the pages of their products.\nManufacturing : Analyzing customer sentiment helps them optimize their product according to trending consumer interests and also to match their production volume to varying market demand. They also use R to minimize their production costs and maximize profits.\n\nArticle : https://data-flair.training/blogs/r-applications/"
  },
  {
    "objectID": "assignment1.html#k-fold-cross-validation-in-r-step-by-step",
    "href": "assignment1.html#k-fold-cross-validation-in-r-step-by-step",
    "title": "1  Assignment 1",
    "section": "4.3 K-Fold Cross Validation in R (Step-by-Step)",
    "text": "4.3 K-Fold Cross Validation in R (Step-by-Step)\nIn AI projects, a few models are run to figure out which one is the best for prediction.\nK-fold cross validation is widely used method for model verification.\nFollowing dataset is created.\n\n#create data frame\ndf <- data.frame(y=c(6, 8, 12, 14, 14, 15, 17, 22, 24, 23),\n                 x1=c(2, 5, 4, 3, 4, 6, 7, 5, 8, 9),\n                 x2=c(14, 12, 12, 13, 7, 8, 7, 4, 6, 5))\n\n#view data frame\ndf\n##     y x1 x2\n## 1   6  2 14\n## 2   8  5 12\n## 3  12  4 12\n## 4  14  3 13\n## 5  14  4  7\n## 6  15  6  8\n## 7  17  7  7\n## 8  22  5  4\n## 9  24  8  6\n## 10 23  9  5\n\nMultiple linear regression model is fit to the dataset. k-fold cross validation with k=5 is performed to evaluate the model performance.\nThe 3 metrics, RMSE, R-squared, and MAE are used to decide which model is the best.\n\nRMSE : the average difference between the predictions made by the model and the actual observations.\nRsquared : the correlation between the predictions made by the model and the actual observations.\nMAE : the average absolute difference between the predictions made by the model and the actual observations.\n\n\nlibrary(caret)\n## Zorunlu paket yükleniyor: ggplot2\n## Zorunlu paket yükleniyor: lattice\n\n#specify the cross-validation method\nctrl <- trainControl(method = \"cv\", number = 5)\n\n#fit a regression model and use k-fold CV to evaluate performance\nmodel <- train(y ~ x1 + x2, data = df, method = \"lm\", trControl = ctrl)\n\n#view summary of k-fold CV               \nprint(model)\n## Linear Regression \n## \n## 10 samples\n##  2 predictor\n## \n## No pre-processing\n## Resampling: Cross-Validated (5 fold) \n## Summary of sample sizes: 8, 8, 8, 8, 8 \n## Resampling results:\n## \n##   RMSE      Rsquared  MAE     \n##   3.338473  1         3.036831\n## \n## Tuning parameter 'intercept' was held constant at a value of TRUE\n\nThe final model formula is :\ny = 21.2672 + 0.7803*(x1) – 1.12538(x2)\n\n#view final model\nmodel$finalModel\n## \n## Call:\n## lm(formula = .outcome ~ ., data = dat)\n## \n## Coefficients:\n## (Intercept)           x1           x2  \n##     21.2672       0.7803      -1.1253\n\nThe following code displays the model predictions made for each fold :\n\n#view predictions for each fold\nmodel$resample\n##       RMSE Rsquared      MAE Resample\n## 1 2.474360        1 2.417417    Fold1\n## 2 3.573658        1 3.457940    Fold2\n## 3 4.808773        1 3.544494    Fold3\n## 4 4.094446        1 4.084538    Fold4\n## 5 1.741127        1 1.679767    Fold5\n\nArticle : https://www.statology.org/k-fold-cross-validation-in-r/"
  },
  {
    "objectID": "inclass_exercise1.html",
    "href": "inclass_exercise1.html",
    "title": "2  In-class Exercise 1",
    "section": "",
    "text": "First of all, I installed packages namely dplyr, nycflights13 as well as stringr.\nI used sub function in stringr package to create a driven column, aircraft_type (ac_type).\n\nlibrary(dplyr)\nlibrary(nycflights13)\nlibrary(stringr)\n\noptions(dplyr.summarise.inform = FALSE)\n\nI take a high-level look at planes data which has 3,222 rows and 9 columns. I also have information about what column names are, which data type they have and how their content is in a short notice.\n\nplanes %>% glimpse()\n\nRows: 3,322\nColumns: 9\n$ tailnum      <chr> \"N10156\", \"N102UW\", \"N103US\", \"N104UW\", \"N10575\", \"N105UW…\n$ year         <int> 2004, 1998, 1999, 1999, 2002, 1999, 1999, 1999, 1999, 199…\n$ type         <chr> \"Fixed wing multi engine\", \"Fixed wing multi engine\", \"Fi…\n$ manufacturer <chr> \"EMBRAER\", \"AIRBUS INDUSTRIE\", \"AIRBUS INDUSTRIE\", \"AIRBU…\n$ model        <chr> \"EMB-145XR\", \"A320-214\", \"A320-214\", \"A320-214\", \"EMB-145…\n$ engines      <int> 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, …\n$ seats        <int> 55, 182, 182, 182, 55, 182, 182, 182, 182, 182, 55, 55, 5…\n$ speed        <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ engine       <chr> \"Turbo-fan\", \"Turbo-fan\", \"Turbo-fan\", \"Turbo-fan\", \"Turb…\n\n\n\n\nI created a dataset according to manufacturer column. I filtered planes which are manufactured by Airbus, Airbus Industrie and Boeing. I recoded AIRBUS INDUSTRIE as AIRBUS to have a clean dataset.\n\nab_df <- planes %>%\n          select(tailnum:engine) %>%\n          filter(manufacturer %in% c('AIRBUS', 'AIRBUS INDUSTRIE', 'BOEING')) %>%\n          mutate(manufacturer = recode(manufacturer, 'AIRBUS INDUSTRIE' = 'AIRBUS'))\n\n\n\n\nHere is shown top 5 plane count, average number of seats and engines by manufacturer and year. Top 5 years by manufacturers are mostly overlaps. 5th elements in both Boeing and Airbus have the highest change compared to last years respectively.\n\nab_df %>%\n  group_by(manufacturer, year) %>%\n  summarise(count = n(), avg_seats = mean(seats), avg_engines = mean(engines)) %>%\n  mutate(yoy_count = (count-lag(count))/lag(count)*100) %>%\n  relocate(yoy_count, .after = count) %>%\n  top_n(5, count) %>%\n  arrange(manufacturer, desc(count)) %>%\n  print(n = Inf)\n\n# A tibble: 10 × 6\n# Groups:   manufacturer [2]\n   manufacturer  year count yoy_count avg_seats avg_engines\n   <chr>        <int> <int>     <dbl>     <dbl>       <dbl>\n 1 AIRBUS        2001    82      2.5       186            2\n 2 AIRBUS        2000    80     35.6       182.           2\n 3 AIRBUS        2002    60    -26.8       175.           2\n 4 AIRBUS        1999    59     15.7       184.           2\n 5 AIRBUS        1998    51    325         185.           2\n 6 BOEING        2001   142      5.97      172.           2\n 7 BOEING        2000   134      8.06      176.           2\n 8 BOEING        1999   124     20.4       180.           2\n 9 BOEING        1998   103    119.        182.           2\n10 BOEING        2004    77    157.        148.           2\n\n\n\n\n\nA new column is created named “ac_type” derived from planes’ model. I work in Pegasus currently. As far as I know there is no ac_type starts with “MD” in the fleet. So, I excluded them. As the seat capacity increases, plane count generally decreases independently of manufacturer.\n\nab_df %>%\n  mutate(ac_type = sub(\"\\\\-.*\", \"\", model)) %>%\n  filter(ac_type != \"MD\") %>%\n  group_by(manufacturer, ac_type) %>%\n  summarise(count = n(), avg_seats = mean(seats), med_seats = median(seats), avg_engines = mean(engines)) %>%\n  arrange(manufacturer, desc(count))\n\n# A tibble: 12 × 6\n# Groups:   manufacturer [2]\n   manufacturer ac_type count avg_seats med_seats avg_engines\n   <chr>        <chr>   <int>     <dbl>     <dbl>       <dbl>\n 1 AIRBUS       A320      415      193.       200        2   \n 2 AIRBUS       A319      208      164.       179        2   \n 3 AIRBUS       A321       94      297.       379        2   \n 4 AIRBUS       A330       18      377.       377        2.11\n 5 AIRBUS       A340        1      375        375        4   \n 6 BOEING       737      1037      153.       149        2   \n 7 BOEING       757       308      186.       178        2   \n 8 BOEING       767       170      315.       330        2   \n 9 BOEING       717        88      100        100        2   \n10 BOEING       777        12      400        400        2   \n11 BOEING       787         4      260        260        2   \n12 BOEING       747         1      450        450        4   \n\n\n\n\n\nI created 8 bins sized 50. Fleet consists of planes which have seats between 150 and 200 mostly.\n\nab_df %>%\n  group_by(seat_group = cut(seats, c(0,50,100,150,200,250,300,350,400,450,500), include.lowest = TRUE)) %>%\n  summarise(count = n())\n\n# A tibble: 8 × 2\n  seat_group count\n  <fct>      <int>\n1 (50,100]     102\n2 (100,150]    934\n3 (150,200]   1035\n4 (200,250]     13\n5 (250,300]     85\n6 (300,350]    114\n7 (350,400]     82\n8 (400,450]      1\n\n\n\n\n\nConsequently, I analysed data based on year, aircraft type and seat counts.\n\nTop 5 plane count over years doesn’t change much according to manufacturer. Airbus and Boeing have gone hand-in-hand in manufacture-wise over years.\nThere is a negative relationship between seat capacity and plane count. As the seat capacity increases, plane count decreases and engine count increases. Since maintenance costs are high in aircraft industry, companies may not want to prefer planes that have 4 engines. Therefore, production amount in high-engine sized planes are lower.\nFleet mostly consists of planes which have a seat capacity between 150 and 200. This analysis is aligned with the 2nd one.\n\nEnjoy reading ! :)"
  },
  {
    "objectID": "assignment3.html",
    "href": "assignment3.html",
    "title": "3  ShinyApp Assignment",
    "section": "",
    "text": "First of all, I installed packages.\n\nlibrary(dplyr)\nlibrary(readxl)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(reshape)\nlibrary(tidyverse)\nlibrary(scales)\nlibrary(openxlsx)\n\noptions(dplyr.summarise.inform = FALSE)\n\nI fetched raw data and stored in students variable.\n\nstudents<-read_excel(\"foreign_students_by_nationality_2021_2022.xlsx\")\n\nI high-level look at raw data which has 7 columns and 10.461 rows.\n\nstudents %>% glimpse()\n\nRows: 10,461\nColumns: 7\n$ `Üniversite Adı`  <chr> \"ABDULLAH GÜL ÜNİVERSİTESİ\", \"ABDULLAH GÜL ÜNİVERSİT…\n$ `Üniversite Türü` <chr> \"DEVLET\", \"DEVLET\", \"DEVLET\", \"DEVLET\", \"DEVLET\", \"D…\n$ `İl Adı`          <chr> \"KAYSERİ\", \"KAYSERİ\", \"KAYSERİ\", \"KAYSERİ\", \"KAYSERİ…\n$ Uyruk             <chr> \"AFGANİSTAN İSLAM CUMHURİYETİ\", \"ALMANYA FEDERAL CUM…\n$ E                 <chr> \"1\", \"1\", \"0\", \"8\", \"4\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1…\n$ K                 <chr> \"0\", \"0\", \"1\", \"2\", \"3\", \"0\", \"0\", \"1\", \"2\", \"0\", \"0…\n$ T                 <chr> \"1\", \"1\", \"1\", \"10\", \"7\", \"1\", \"1\", \"2\", \"3\", \"1\", \"…\n\n\nI changed column names so that I could omit white spaces and Turkish characters.\n\nnew_cols <- c(\"university\",\"university_type\",\"country\",\"nationality\",\"male\",\"female\",\"total\")\n\ncolnames(students) <- new_cols\n\nI removed any incomplete cases.\n\nstudents <- na.omit(students) \n\nI selected columns from university to female.\n\nstudents <- students %>%\n  select('university':'female')\n\nI unpivoted male and female column as gender column by using melt function.\n\nstudents <- reshape2::melt(students, id = c(\"university\", \"university_type\", \"country\", \"nationality\"), variable.name = \"gender\", value.name=\"count\")\n\nI converted count column as numeric.\n\nstudents$count <- as.numeric(students$count)\n\nI saved file as RDS.\n\nsaveRDS(data, file = \"apps/foreign_students_app/students.Rds\")\n\nI created another excel file named foreign_students.xlsx derived from raw data. I used this file in shiny app.\n\nwrite.xlsx(students, \"ForeignStudentAnalysis/foreign_students.xlsx\")"
  },
  {
    "objectID": "assignment3.html#shinyapps.io",
    "href": "assignment3.html#shinyapps.io",
    "title": "3  ShinyApp Assignment",
    "section": "Shinyapps.io",
    "text": "Shinyapps.io\nhttps://avagcanseza.shinyapps.io/foreign_students_app/"
  },
  {
    "objectID": "assignment3.html#command-for-local-running",
    "href": "assignment3.html#command-for-local-running",
    "title": "3  ShinyApp Assignment",
    "section": "Command for local running",
    "text": "Command for local running\n\nshiny::runGitHub(repo = \"pjournal/mef06-avagcanseza\",subdir=\"apps/foreign_students_app\")"
  },
  {
    "objectID": "assignment4.html",
    "href": "assignment4.html",
    "title": "4  Operations Research",
    "section": "",
    "text": "Optimization is at the heart of business for many industries, especially for aviation. Tail assignment helps aviation companies fly more with a given number of aircrafts. When capacity utilization problem is solved, fuel-saving, reduction in operating costs and increase in on-time performance are achieved. They are all connected. The trick is to assign the best flight to an aircraft, while respecting the operational constraints.\nAn example would be organizing weekend plans with friends. You have to consider where / when to meet, whom to meet with, if you want to do some extra work before meeting like buying gifts, you have to leave home early, etc. You should organize your plan in a way that time and place can fit best. You should put them in order. While planning, you should also consider your friends’ plans. So, scheduling is not an easy job to do even in personal life.\nAviation companies cope with this problem in their daily operations in order to build the most efficient schedule for sequencing the flights that each aircraft will perform.\n\n\n\n\nAir France has a limited number of aircrafts. So, the Operations Research Team should assign the best-fitted flights for available aircrafts by maximizing the operational efficiency.\n\n\n\nThe team modeled three criteria based on business expertise and statistical analysis of the past.\n\nFuel consumption estimation for each craft\nMaintenance schedule estimation for individual parts of each aircraft\nCost estimation of each flight delay\n\nA robust model is designed to help the operation run smoothly. At first, the model was working well with flights lasting from 6 to 12 hours. It was quite challenging to adapt the model with flights lasting 3 to 6 hours. Because shorter flights add much more complexity to the model by increasing the scheduled flights. That is where Gurobi Optimizer came in. The team used this tool to figure out an optimal or near-optimal solution to the tail assignment problem.\nThe team also developed a Decision Support Tool to help the internal users make decisions based on experience in case of any needs. The users are informed about the effects of their decisions on the running operations via this tool.\n\n\n\nAir France experienced the benefits below after building the tail assignment model :\n\n1% decrease in fuel costs\nSaving on operating costs\nReduction in delay propagations\nOptimizing business processes with the use of data\n\nHere is the link to the case study.\nEnjoy reading!"
  }
]